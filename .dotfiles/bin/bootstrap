#!/bin/bash

set -e

# Exit codes
readonly E_SUCCESS=0
readonly E_GENERIC_FAILURE=1
readonly E_SOURCED=2 # TODO: Ansible also exists with this code
readonly E_DOTFILES_EXISTS=3
readonly E_OS_NOT_DETECTED=4

dotfiles_dest_dir="$HOME/.dotfiles"
OS=""

error() {
    printf >&2 "Error: %s\n" "$*"
}

print_and_exit() {
  exit_code=$?

  case $exit_code in
    "$E_SUCCESS")
      printf "âœ“ Success\n"
      ;;
    "$E_SOURCED")
      error "This script should not be sourced. Invoke it using a subshell."
      ;;
    "$E_DOTFILES_EXISTS")
      error "Dotfiles directory already exist at $dotfiles_dest_dir"
      ;;
    "$E_OS_NOT_DETECTED")
      error "Cannot detect OS"
      ;;
    *)
      error "Unknown error"
      ;;
  esac

  exit $exit_code
}

is_sourced() {
  if [ -n "$ZSH_VERSION" ]; then 
    case $ZSH_EVAL_CONTEXT in *:file:*) return 0;; esac
  else  # Add additional POSIX-compatible shell names here, if needed.
    case ${0##*/} in dash|-dash|bash|-bash|ksh|-ksh|sh|-sh) return 0;; esac
  return 1  # NOT sourced.
  fi
}

dotfiles_exists() {
  [ -d "$dotfiles_dest_dir" ] &&
  [ -n "$(ls -A "$dotfiles_dest_dir")" ]
}

os_is_detected() {
  if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
  else
    exit 1
  fi
}

# TODO: cleaup
first_arg="$1"

trap print_and_exit EXIT

if is_sourced; then
  # check if this works
  return $E_SOURCED
fi

if dotfiles_exists; then
  exit $E_DOTFILES_EXISTS
fi

if ! os_is_detected;  then
  exit $E_OS_NOT_DETECTED
fi

# Install packages based on OS
case $OS in
  "ubuntu")
    sudo apt update
    if ! command -v ansible > /dev/null 2>&1; then
      sudo DEBIAN_FRONTEND=noninteractive apt install -y ansible --no-install-recommends
    fi
    ;;

  "fedora"|"fedoraremixforwsl")
    sudo dnf check-update || true  # dnf check-update exits with 100 if updates are available
    if ! command -v ansible > /dev/null 2>&1; then
      sudo dnf install -y ansible
    fi
    ;;

  *)
    echo "Unsupported OS: $OS"
    exit $E_GENERIC_FAILURE
    ;;
esac

# Create a symbolic link to the dotfiles directory
script_dir="$(dirname "$0")"
src_dir="$(realpath "$script_dir/../../.dotfiles")"
ln -s "$src_dir" "$dotfiles_dest_dir"

if command -v ansible-galaxy > /dev/null 2>&1; then
  ansible-galaxy collection install -r "$dotfiles_dest_dir/ansible/requirements.yml"
fi

if command -v ansible > /dev/null 2>&1; then
  ansible-playbook "$dotfiles_dest_dir/ansible/site.yml" ${first_arg:+--tags $first_arg}
fi

# Installation complete, start zsh
exec zsh -l

